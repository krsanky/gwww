


https://medium.com/@jcox250/password-hash-salt-using-golang-b041dc94cb72

--
There are things that we build upon from our pasts.
There are things that we create each generation.
(There are things we REcreate each generation)
go get github.com/gorilla/csrf


rough pw algo:
 return [salt] + pbkdf2([salt], [credential], c=10000); 

Stored in the database, a bcrypt "hash" might look something like this:

    $2a$10$vI8aWBnW3fID.ZQ4/zo1G.q1lRps.9cGLcZEiGDMVr5yUP1KUOYTa

This is actually three fields, delimited by "$":

    2a identifies the bcrypt algorithm version that was used.  10
    is the cost factor; 210 iterations of the key derivation function
    are used (which is not enough, by the way.  I'd recommend a
    cost of 12 or more.)
    vI8aWBnW3fID.ZQ4/zo1G.q1lRps.9cGLcZEiGDMVr5yUP1KUOYTa is the
    salt and the cipher text, concatenated and encoded in a modified
    Base-64.  The first 22 characters decode to a 16-byte value for
    the salt.  The remaining characters are cipher text to be
    compared for authentication.




